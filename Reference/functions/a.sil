START
MOV BP, 2
MOV SP, 2
PUSH BP //After Function Call Begin
MOV BP, SP
MOV R0, BP
MOV R1, 12
ADD R0, R1
MOV SP, R0 //After Function Call End
CALL FUNCmain
HALT
FUNCbSort:
PUSH BP //After Function Call Begin
MOV BP, SP
MOV R0, BP
MOV R1, 3
ADD R0, R1
MOV SP, R0 //After Function Call End
MOV R0, 0
MOV R1, BP
MOV R2, 1
ADD R2, R1
MOV [R2], R0
WHILES1:
MOV R0, BP
MOV R1, 1
ADD R1, R0
MOV R0, [R1]
MOV R1, BP
MOV R2, -3
ADD R2, R1
MOV R1, [R2]
LT R0 R1
JZ R0, ENDWHILE1
MOV R0, 1
MOV R1, BP
MOV R2, 2
ADD R2, R1
MOV [R2], R0
WHILES2:
MOV R0, BP
MOV R1, 2
ADD R1, R0
MOV R0, [R1]
MOV R1, BP
MOV R2, -3
ADD R2, R1
MOV R1, [R2]
LT R0 R1
JZ R0, ENDWHILE2
IFSTART1:
MOV R0, BP
MOV R1, 2
ADD R1, R0
MOV R0, [R1]
MOV R1, 2
ADD R0, R1
MOV R0, [R0]
MOV R1, BP
MOV R2, 2
ADD R2, R1
MOV R1, [R2]
MOV R2, 1
SUB R1 R2
MOV R2, 2
ADD R1, R2
MOV R1, [R1]
LT R0 R1
JZ R0, ENDIF1
MOV R1, BP
MOV R2, 2
ADD R2, R1
MOV R1, [R2]
MOV R2, 2
ADD R1, R2
MOV R1, [R1]
MOV R2, BP
MOV R3, 3
ADD R3, R2
MOV [R3], R1
MOV R1, BP
MOV R2, 2
ADD R2, R1
MOV R1, [R2]
MOV R2, 1
SUB R1 R2
MOV R2, 2
ADD R1, R2
MOV R1, [R1]
MOV R2, BP
MOV R3, 2
ADD R3, R2
MOV R2, [R3]
MOV R3, 2
ADD R2, R3
MOV [R2], R1
MOV R1, BP
MOV R2, 3
ADD R2, R1
MOV R1, [R2]
MOV R2, BP
MOV R3, 2
ADD R3, R2
MOV R2, [R3]
MOV R3, 1
SUB R2 R3
MOV R3, 2
ADD R2, R3
MOV [R2], R1
ENDIF1:
MOV R0, BP
MOV R1, 2
ADD R1, R0
MOV R0, [R1]
MOV R1, 1
ADD R0 R1
MOV R1, BP
MOV R2, 2
ADD R2, R1
MOV [R2], R0
JMP WHILES2
ENDWHILE2:
MOV R0, BP
MOV R1, 1
ADD R1, R0
MOV R0, [R1]
MOV R1, 1
ADD R0 R1
MOV R1, BP
MOV R2, 1
ADD R2, R1
MOV [R2], R0
JMP WHILES1
ENDWHILE1:
MOV R0, -2 //Before Return Begin
MOV R1, BP
ADD R0, R1
MOV R1, 123
MOV [R0], R1
MOV SP, BP
POP BP //Before Return End
RET
FUNCmain:
PUSH BP //After Function Call Begin
MOV BP, SP
MOV R0, BP
MOV R1, 0
ADD R0, R1
MOV SP, R0 //After Function Call End
MOV R0, 0
MOV [1], R0
WHILES3:
MOV R0, [1]
MOV R1, 10
LT R0 R1
JZ R0, ENDWHILE3
IN R0
MOV R1, [1]
MOV R2, 2
ADD R1, R2
MOV [R1], R0
MOV R0, [1]
MOV R1, 1
ADD R0 R1
MOV [1], R0
JMP WHILES3
ENDWHILE3:
IN R0
MOV [1], R0
MOV R1, SP //Before Function Call
MOV R2, 2
ADD R2, R1
MOV SP, R2
MOV R2, [1]
MOV R3, 1
ADD R3, R1
MOV [R3], R2
CALL FUNCbSort //Calling Function
MOV R1, SP //After Function Return Begin
MOV R2, 2
SUB R1, R2
MOV R2, SP
MOV SP, R1
MOV R0, [R2] //After Function Return End
MOV [12], R0
MOV R0, 0
MOV [1], R0
WHILES4:
MOV R0, [1]
MOV R1, 10
LT R0 R1
JZ R0, ENDWHILE4
MOV R0, [1]
MOV R1, 2
ADD R0, R1
MOV R0, [R0]
OUT R0
MOV R0, [1]
MOV R1, 1
ADD R0 R1
MOV [1], R0
JMP WHILES4
ENDWHILE4:
MOV R0, -2 //Before Return Begin
MOV R1, BP
ADD R0, R1
MOV R1, 0
MOV [R0], R1
MOV SP, BP
POP BP //Before Return End
RET
